{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","processFieldExtensions","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","thirdPartySchemas","typeMapping","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","values","map","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addResolvers","addConvenienceChildrenFields","addTypeToRootQuery","forEach","typeOrTypeDef","plugin","addedTypes","addTypeDefs","error","reportParsingError","type","processAddedType","createdFrom","createTypeComposerFromGatsbyType","typeName","addAsComposer","checkIsAllowedTypeName","get","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","name","directives","getDirectives","args","noDefaultResolvers","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","hasExtension","warn","endsWith","includes","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","JSON","stringify","tc","getTypeName","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getFields","getTypeMap","Object","keys","createTC","field","getField","fieldType","toString","replace","extendField","intermediateSchema","createResolvers","resolvers","has","fieldConfig","hasField","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","getExtension","newConfig","source","context","info","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","addResolver","filter","sort","skip","limit","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","undefined","value","queryName","queryNamePlural","getResolver","message","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","panic"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n} = require(`graphql-compose`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst { processFieldExtensions } = require(`./extensions`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  thirdPartySchemas,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getOTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(schemaComposer.values()).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({ schemaComposer, typeComposer, parentSpan })\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addResolvers({ schemaComposer, typeComposer, parentSpan })\n      await addConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      let addedTypes\n      try {\n        addedTypes = schemaComposer.addTypeDefs(typeOrTypeDef)\n      } catch (error) {\n        reportParsingError(error)\n      }\n      addedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom: `sdl`,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom: `typeBuilder`,\n          plugin,\n        })\n      }\n    } else {\n      processAddedType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n        createdFrom: `graphql-js`,\n        plugin,\n      })\n    }\n  })\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  checkIsAllowedTypeName(typeName)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`:\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan: parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            const fieldTypeName =\n              fieldConfig.type && fieldConfig.type.toString()\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan: parentSpan,\n  })\n}\n\nconst addResolvers = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n  typeComposer.addResolver({\n    name: `findOne`,\n    type: typeComposer,\n    args: {\n      ...filterInputTC.getFields(),\n    },\n    resolve: findOne(typeName),\n  })\n  typeComposer.addResolver({\n    name: `findManyPaginated`,\n    type: paginationTC,\n    args: {\n      filter: filterInputTC,\n      sort: sortInputTC,\n      skip: `Int`,\n      limit: `Int`,\n    },\n    resolve: findManyPaginated(typeName),\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n  schemaComposer.Query.addFields({\n    [queryName]: typeComposer.getResolver(`findOne`),\n    [queryNamePlural]: typeComposer.getResolver(`findManyPaginated`),\n  })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const report = require(`gatsby-cli/lib/reporter`)\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n"],"file":"schema.js"}