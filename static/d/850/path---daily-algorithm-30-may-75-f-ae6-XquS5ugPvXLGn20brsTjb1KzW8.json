{"data":{"site":{"siteMetadata":{"title":"Jordan Ristow","author":"Jordan Ristow"}},"markdownRemark":{"id":"7e656ff6-44dd-5a09-a122-d93baa77ef04","excerpt":"Problem StatementRemove all elements from a linked list of integers that have value —val—.Example:Input = 1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6val = 6Output = 1 ->…","html":"<h2>Problem Statement</h2>\n<p>Remove all elements from a linked list of integers that have value —val—.</p>\n<p>Example:</p>\n<p>Input = 1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6</p>\n<p>val = 6</p>\n<p>Output = 1 -> 2 -> 3 -> 4 -> 5</p>\n<p><em>Node definition for singly linked lists</em></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h2>Description of Algorithm</h2>\n<p>In this problem we will have two separate portions of the algorithm. The first will check if the head of our list is the value we need to remove. The second portion will walk through the list to find and remove any other elements with the value we are looking for. To do this, we will always check the value of element.next. This way we won’t lose our place in the list.</p>\n<h2>Algorithm in Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">removeElements</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> head <span class=\"token keyword\">and</span> head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n        head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    cur <span class=\"token operator\">=</span> head\n    <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">return</span> head</code></pre></div>\n<h2>Walkthrough of Algorithm</h2>\n<p>Let’s walk through this code and see what it’s doing.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> head <span class=\"token keyword\">and</span> head<span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n    head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>Here, we look at the head element of our list and if the value of it is equal to the value we are looking for, we skip the element and move to the next item in the list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cur <span class=\"token operator\">=</span> head\n<span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">:</span></code></pre></div>\n<p>Here, we create a new variable, cur and assign the value of head to it. Then, as long as there is a value assigned to cur we iterate through the next portion of our code.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">and</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> val<span class=\"token punctuation\">:</span>\n    cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>This section is where we check if there is a value in the next node and if the value in the node after that is equal to the value we are excluding. If both of those conditions are true, we skip the item after the next node.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span></code></pre></div>\n<p>Here we are simply advancing to the next node in our list.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">return</span> head</code></pre></div>\n<p>Finally, we return the head element of our linked list.</p>\n<h2>Conclusion</h2>\n<p>With this algorithm, we simply have to make one pass through our linked list to remove any nodes with our target value. Additionally, we do not require any extra memory to do this, as we are using the existing nodes and simply changing which node is stored as the next node for any nodes preceding ones with the target value.</p>","frontmatter":{"title":"Remove Elements From a Linked List","date":"May 30, 2019","description":"Todays algorithm looks at how we can remove a specific value from a linked list, if it is present."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/daily-algorithm-30-may/","previous":{"fields":{"slug":"/daily-algorithm-29-may/"},"frontmatter":{"title":"Daily Algorithm Practice - Merge Sorted Linked Lists"}},"next":null}}