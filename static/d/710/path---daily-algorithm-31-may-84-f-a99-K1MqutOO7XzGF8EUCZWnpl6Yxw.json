{"data":{"site":{"siteMetadata":{"title":"Jordan Ristow","author":"Jordan Ristow"}},"markdownRemark":{"id":"97267b48-40c3-5e20-9fb5-7482b9b79725","excerpt":"Problem StatementGiven a string containing just the characters ’(’, ’)’, ’{’,’}’, ’’, ’’, determine if the input string is valid. An input string is valid if…","html":"<h2>Problem Statement</h2>\n<p>Given a string containing just the characters ’(’, ’)’, ’{’,’}’, ’[’, ’]’, determine if the input string is valid. An input string is valid if:</p>\n<ul>\n<li>Open brackets must be closed by the same type of bracket.</li>\n<li>Open brackets must be closed in the correct order.\nNote that an empty string is also considered valid.</li>\n</ul>\n<h2>Description of Algorithm</h2>\n<p>We are going to make use of a stack data structure to work through this. A stack supports a last in first out ordering, which will allow us to prgoress through the string and push items onto the stack if they are an opening parenthesis. We also utilize a hash map (or python dictionary) to quickly check if the item we are examining is a closing parenthesis.</p>\n<h2>Algorithm in Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    mapping <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"(\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"[\"</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> char <span class=\"token keyword\">in</span> mapping<span class=\"token punctuation\">:</span>\n            top_element <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> stack <span class=\"token keyword\">else</span> <span class=\"token string\">'#'</span>\n            <span class=\"token keyword\">if</span> mapping<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> top_element<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> stack</code></pre></div>\n<h2>Walkthrough of Algorithm</h2>\n<h2>Conclusion</h2>","frontmatter":{"title":"Daily Algorithm Practice - Valid Parentheses","date":"May 31, 2019","description":"Todays algorithm practice problem looks at using a stack to check whether a passed in string contains a closing parenthesis for each opening parenthesis."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/daily-algorithm-31-may/","previous":{"fields":{"slug":"/daily-algorithm-30-may/"},"frontmatter":{"title":"Daily Algorithm Practice - Remove Elements From a Linked List"}},"next":null}}